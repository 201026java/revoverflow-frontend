name: ECR/EKS
on: push
env:
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  ECR_REPOSITORY: matt-oberlies-00000916-${{ secrets.APP_NAME }}
  IMAGE_TAG: ${{ github.sha }}
jobs:
  build:
    name: Build Image
    runs-on: ubuntu-latest
    steps:
      # ---[ Configuring AWS credentials and Logging in to ECR ]---
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build the image
        id: docker_build
        run: |
          pwd
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
  test:
    name: Run NodeJS and npm tests
    runs-on: ubuntu-latest
    steps:
      - name: Setup test environment
        uses: actions/setup-node@v1
        with:
          node-version: '12'
          #check-latest: true # Unexpected input(s) 'check-latest', valid inputs are ['always-auth', 'node-version', 'registry-url', 'scope', 'version']
      - name: Downloads package to runner machine
        uses: actions/checkout@v2
      - name: Run NPM tests
        run: |
          pwd
          npm ci
          npm run build --if-present
          npm test
  analyze:
    name: Analyze Code Quality
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  deploy:
    # ---[ Use docker image from the build step and deploy on EKS ]---
    needs: [build, analyze]
    name: Deploy on EKS
    runs-on: ubuntu-latest
    steps:
      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.EKS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.EKS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Deploy to EKS
        run: |
          aws configure set aws_access_key_id ${{ secrets.EKS_ACCESS_KEY_ID }} --profile p3eks
          aws configure set aws_secret_access_key ${{ secrets.EKS_SECRET_ACCESS_KEY }} --profile p3eks
          aws configure set default.region us-east-1 --profile p3eks
          aws eks --region us-east-1 update-kubeconfig --profile p3eks --name matt-oberlies-00000916
          kubectl --namespace default set image deployment/ro-frontend frontend=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          kubectl --namespace default rollout status deploy/ro-frontend
